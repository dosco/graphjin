{"version":3,"sources":["App.js","index.js"],"names":["url","window","location","protocol","host","subscriptionUrl","fetcher","createGraphiQLFetcher","openLink","open","App","useState","schema","setSchema","query","setQuery","explorerOpen","setExplorerOpen","graphiql","React","createRef","useEffect","a","introspect","getIntrospectionQuery","next","res","buildClientSchema","value","data","handleEditQuery","handleToggleExplorer","className","onEdit","onRunOperation","operationName","handleRunQuery","explorerIsOpen","onToggleExplorer","ref","defaultSecondaryEditorOpen","headerEditorEnabled","shouldPersistHeaders","onEditQuery","Logo","style","display","justifyContent","alignItems","padding","letterSpacing","paddingBottom","marginRight","href","data-color-scheme","data-size","data-show-count","aria-label","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","Menu","MenuItem","onSelect","ReactDOM","render","document","getElementById"],"mappings":"0SASA,MAAMA,EAAG,UAAMC,OAAOC,SAASC,SAAtB,aAAmCF,OAAOC,SAASE,KAAnD,mBACHC,EAAe,eAAWJ,OAAOC,SAASE,KAA3B,mBAEfE,EAAUC,YAAsB,CACpCP,MACAK,oBAGIG,EAAYR,IAChBC,OAAOQ,KAAKT,EAAK,WA0IJU,MAzHH,KAAO,MAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAhBV,oOAcA,mBAETG,EAFS,KAEFC,EAFE,OAGwBJ,oBAAS,GAHjC,mBAGTK,EAHS,KAGKC,EAHL,KAKhB,IAAIC,EAAWC,IAAMC,YAErBC,oBAAU,KACR,sBAAC,8BAAAC,EAAA,6DACKC,EAAajB,EAAQ,CAAEQ,MAAOU,gBADnC,SAEiBD,EAAWE,OAF5B,OAEKC,EAFL,OAGCb,EAAUc,YAAkBD,EAAIE,MAAMC,OAHvC,0CAAD,IAKC,IAEH,MAAMC,EAAmBhB,IACvBC,EAASD,IAGLiB,EAAuB,IAAMd,GAAiBD,GAEpD,OACE,yBAAKgB,UAAU,sBACb,kBAAC,IAAD,CACEpB,OAAQA,EACRE,MAAOA,EACPmB,OAAQH,EACRI,eAAiBC,GACfjB,EAASkB,eAAeD,GAE1BE,eAAgBrB,EAChBsB,iBAAkBP,IAEpB,kBAAC,IAAD,CACEQ,IAAMA,GAASrB,EAAWqB,EAC1BjC,QAASA,EACTkC,4BAA4B,EAC5BC,qBAAqB,EACrBC,sBAAsB,EACtB5B,MAAOA,EACP6B,YAAab,GAEb,kBAAC,IAASc,KAAV,KACE,yBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,QAAS,UAGX,yBACEJ,MAAO,CACLK,cAAe,MACfC,cAAe,MACfC,YAAa,QAJjB,YASA,kBAAC,IAAD,CACEC,KAAK,oCACLC,oBAAkB,iDAClBC,YAAU,QACVC,kBAAgB,OAChBC,aAAW,iCALb,UAYJ,kBAAC,IAASC,QAAV,KACE,kBAAC,IAASC,OAAV,CACEC,QAAS,IAAM1C,EAAS2C,sBACxBC,MAAM,WACNC,MAAM,kCAER,kBAAC,IAASJ,OAAV,CACEC,QAAS,IAAM1C,EAAS8C,sBACxBF,MAAM,UACNC,MAAM,iBAER,kBAAC,IAASJ,OAAV,CACEC,QAAS7B,EACT+B,MAAM,WACNC,MAAM,oBAER,kBAAC,IAASE,KAAV,CAAeH,MAAM,wBAAcC,MAAM,uBACvC,kBAAC,IAASG,SAAV,CACEC,SAAU,IACR3D,EACE,8KAGJsD,MAAM,mBACNC,MAAM,qBAER,kBAAC,IAASG,SAAV,CACEC,SAAU,IAAM3D,EAAS,qCACzBsD,MAAM,oBACNC,MAAM,2B,OClIpBK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.67e1c75c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport GraphiQL from \"graphiql\";\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { createGraphiQLFetcher } from \"@graphiql/toolkit\";\nimport { buildClientSchema, getIntrospectionQuery } from \"graphql\";\nimport GitHubButton from \"react-github-btn\";\n\nimport \"graphiql/graphiql.min.css\";\n\nconst url = `${window.location.protocol}//${window.location.host}/api/v1/graphql`;\nconst subscriptionUrl = `ws://${window.location.host}/api/v1/graphql`;\n\nconst fetcher = createGraphiQLFetcher({\n  url,\n  subscriptionUrl,\n});\n\nconst openLink = (url) => {\n  window.open(url, \"_blank\");\n};\n\nconst defaultQuery = `\n# Use this editor to build and test your GraphQL queries\n# Set a query name if you want the query saved to the \n# allow list to use in production\n\nquery {\n  users(id: \"3\") {\n    id\n    full_name\n    email\n  }\n}\n`;\n\nconst App = () => {\n  const [schema, setSchema] = useState(null);\n  const [query, setQuery] = useState(defaultQuery);\n  const [explorerOpen, setExplorerOpen] = useState(true);\n\n  let graphiql = React.createRef();\n\n  useEffect(() => {\n    (async function () {\n      let introspect = fetcher({ query: getIntrospectionQuery() });\n      let res = await introspect.next();\n      setSchema(buildClientSchema(res.value.data));\n    })();\n  }, []);\n\n  const handleEditQuery = (query) => {\n    setQuery(query);\n  };\n\n  const handleToggleExplorer = () => setExplorerOpen(!explorerOpen);\n\n  return (\n    <div className=\"graphiql-container\">\n      <GraphiQLExplorer\n        schema={schema}\n        query={query}\n        onEdit={handleEditQuery}\n        onRunOperation={(operationName) =>\n          graphiql.handleRunQuery(operationName)\n        }\n        explorerIsOpen={explorerOpen}\n        onToggleExplorer={handleToggleExplorer}\n      />\n      <GraphiQL\n        ref={(ref) => (graphiql = ref)}\n        fetcher={fetcher}\n        defaultSecondaryEditorOpen={true}\n        headerEditorEnabled={true}\n        shouldPersistHeaders={true}\n        query={query}\n        onEditQuery={handleEditQuery}\n      >\n        <GraphiQL.Logo>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              padding: \"2px 0\",\n            }}\n          >\n            <div\n              style={{\n                letterSpacing: \"3px\",\n                paddingBottom: \"3px\",\n                marginRight: \"5px\",\n              }}\n            >\n              GRAPHJIN\n            </div>\n            <GitHubButton\n              href=\"https://github.com/dosco/graphjin\"\n              data-color-scheme=\"no-preference: dark; light: light; dark: dark;\"\n              data-size=\"large\"\n              data-show-count=\"true\"\n              aria-label=\"Star dosco/graphjin on GitHub\"\n            >\n              Star\n            </GitHubButton>\n          </div>\n        </GraphiQL.Logo>\n\n        <GraphiQL.Toolbar>\n          <GraphiQL.Button\n            onClick={() => graphiql.handlePrettifyQuery()}\n            label=\"Prettify\"\n            title=\"Prettify Query (Shift-Ctrl-P)\"\n          />\n          <GraphiQL.Button\n            onClick={() => graphiql.handleToggleHistory()}\n            label=\"History\"\n            title=\"Show History\"\n          />\n          <GraphiQL.Button\n            onClick={handleToggleExplorer}\n            label=\"Explorer\"\n            title=\"Toggle Explorer\"\n          />\n          <GraphiQL.Menu label=\"❤️ GraphJin\" title=\"Support the project\">\n            <GraphiQL.MenuItem\n              onSelect={() =>\n                openLink(\n                  \"https://twitter.com/share?text=Build%20APIs%20in%205%20minutes%20with%20GraphJin.%20An%20automagical%20GraphQL%20to%20SQL%20compiler&url=https://github.com/dosco/graphjin\"\n                )\n              }\n              label=\"Share on Twitter\"\n              title=\"Share on Twitter\"\n            />\n            <GraphiQL.MenuItem\n              onSelect={() => openLink(\"https://github.com/sponsors/dosco\")}\n              label=\"Sponsor on GitHub\"\n              title=\"Sponsor on GitHub\"\n            />\n          </GraphiQL.Menu>\n          {/* <div style={{ marginLeft: \"20px\" }}>\n            <GitHubButton\n              href=\"https://github.com/dosco/graphjin\"\n              data-color-scheme=\"no-preference: dark; light: light; dark: dark;\"\n              data-size=\"large\"\n              data-show-count=\"true\"\n              aria-label=\"Star dosco/graphjin on GitHub\"\n            >\n              Star\n            </GitHubButton>\n          </div> */}\n        </GraphiQL.Toolbar>\n      </GraphiQL>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}