{"version":3,"file":"static/js/143.38ac34fa.chunk.js","mappings":"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","sources":["../node_modules/node_modules/codemirror/mode/javascript/javascript.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var trackScope = parserConfig.trackScope !== false\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\" && stream.peek() == \"!\") {\n      stream.skipToEnd();\n      return ret(\"meta\", \"meta\");\n    } else if (ch == \"#\" && stream.eatWhile(wordRE)) {\n      return ret(\"variable\", \"property\")\n    } else if (ch == \"<\" && stream.match(\"!--\") ||\n               (ch == \"-\" && stream.match(\"->\") && !/\\S/.test(stream.string.slice(0, stream.start)))) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-|&?]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      if (ch == \"?\" && stream.eat(\".\")) return ret(\".\")\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*([^*]|\\*(?!\\/))*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true,\n                     \"regexp\": true, \"this\": true, \"import\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    if (!trackScope) return false\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (!trackScope) return\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  pushcontext.lex = pushblockcontext.lex = true\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), pushblockcontext, forspec, statement, popcontext, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(maybeexpression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(maybeexpression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\" || value == \"readonly\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), typeprops, poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n    if (type == \"quasi\") { return pass(quasiType, afterType); }\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprops(type) {\n    if (type.match(/[\\}\\)\\]]/)) return cont()\n    if (type == \",\" || type == \";\") return cont(typeprops)\n    return pass(typeprop, typeprops)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    } else if (!type.match(/[;\\}\\)\\],]/)) {\n      return cont()\n    }\n  }\n  function quasiType(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasiType);\n    return cont(typeexpr, continueQuasiType);\n  }\n  function continueQuasiType(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasiType);\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(classfield, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(classfield, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), classfield, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"!\") return cont(classfield)\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    if (type == \".\") return pass(maybeoperatorComma);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse && c != popcontext) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      parseJS(state, \"atom\", \"atom\", \"true\", new CodeMirror.StringStream(\"\", 2, null))\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/x-json\", { name: \"javascript\", json: true });\nCodeMirror.defineMIME(\"application/manifest+json\", { name: \"javascript\", json: true })\nCodeMirror.defineMIME(\"application/ld+json\", { name: \"javascript\", jsonld: true });\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"names":["w","ge","defineMode","M","h","K","nr","A","indentUnit","vr","statementIndent","rr","jsonld","O","json","gr","trackScope","k","typescript","er","wordCharacters","yr","r","y","type","style","f","e","t","a","o","d","p","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","jr","Jr","Lr","next","x","$","tokenize","Qr","match","test","eat","tr","skipToEnd","Fr","current","H","peek","eatWhile","string","slice","start","lexical","lastType","propertyIsEnumerable","Rr","dr","fatArrowAt","indexOf","exec","index","charAt","V","Ur","atom","number","variable","regexp","Er","indented","column","prev","info","align","Wr","localVars","name","context","vars","Tr","cc","i","state","stream","marked","hasOwnProperty","length","pop","b","v","lex","s","arguments","push","n","apply","mr","D","block","Ar","X","globalVars","G","ir","Kr","q","fr","E","c","u","l","xr","pr","J","or","Mr","z","Or","qr","Pr","$r","m","T","Cr","Hr","de","me","P","Vr","j","Sr","Ir","g","L","N","le","ke","Y","ur","ar","Xr","re","backUp","pos","Gr","Zr","Yr","ae","ee","B","Q","ne","_r","te","I","kr","wr","ie","br","Z","U","fe","sr","ue","_","se","oe","zr","ce","R","cr","S","C","hr","Nr","lr","Br","pe","be","we","startState","token","sol","indentation","eatSpace","indent","Pass","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","jsonldMode","jsonMode","expressionAllowed","skipExpression","StringStream","registerHelper","defineMIME"],"sourceRoot":""}